from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from yummy_sql_part import get_random
from yummy_telegraph_part import create_page
import os


bot = Bot(token=os.getenv('TOKEN_1'))
dp = Dispatcher(bot)


random_button = KeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ üé≤")
keyboard_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(random_button)


@dp.message_handler(commands=['start', 'help'])
async def command_start(message: types.Message):
    await bot.send_message(
                            message.from_user.id,
                            '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é',
                            reply_markup=keyboard_menu
    )

@dp.message_handler()
async def process_message(message: types.Message):
    if message.text == 'üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ üé≤':
        try:
            anime_data = get_random()
            url_button = types.InlineKeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ YummyAnime', url=anime_data['url'])
            keyboard_markup = types.InlineKeyboardMarkup().add(url_button)

            try:
                page_url = await create_page(anime_data["name"], anime_data["description"])
            except Exception as ex:
                page_url = False
                print(ex)

            await bot.send_photo(
                                chat_id=message.from_user.id,
                                photo=anime_data['poster_url'],
                                caption=

                                        f'<b>{anime_data["name"]}</b>\n'
                                        f'\n'
                                        f'–†–µ–π—Ç–∏–Ω–≥: {anime_data["rate"]}\n'
                                        f'–°—Ç–∞—Ç—É—Å: {anime_data["status"]}\n'
                                        f'–ì–æ–¥: {anime_data["year"]}\n'
                                        f'–ñ–∞–Ω—Ä—ã: {anime_data["category"]}\n'
                                        f'–¢–∏–ø: {anime_data["type"]}\n'
                                        f'\n'
                                        f'<a href="{page_url}">{"–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ—á–µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ" if page_url else "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."}</a>',

                                reply_markup=keyboard_markup,
                                parse_mode=types.ParseMode.HTML
            )
        except Exception as ex:
            print(ex)
            await bot.send_message(message.from_user.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â—ë —Ä–∞–∑!')
    else:
        await message.reply('–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é')


executor.start_polling(dp, skip_updates=True)
